// <auto-generated />
using System;
using INFRASTRUCTURE.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace INFRASTRUCTURE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250417153159_MakePurchaseOrderIdNullableForSupplierQuote")]
    partial class MakePurchaseOrderIdNullableForSupplierQuote
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DOMAIN.Entities.Approvals.Approval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ItemType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Approvals");
                });

            modelBuilder.Entity("DOMAIN.Entities.Approvals.ApprovalStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApprovalId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ApprovalStages");
                });

            modelBuilder.Entity("DOMAIN.Entities.Attachments.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModelType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Reference")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("DOMAIN.Entities.Auth.PasswordReset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KeyName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("DOMAIN.Entities.Auth.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.DeliveryMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("DeliveryModes");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.PackageStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("PackageStyles");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.TermsOfPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("TermsOfPayments");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsRawMaterial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScalable")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.WorkCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("WorkCenters");
                });

            modelBuilder.Entity("DOMAIN.Entities.BillOfMaterials.BillOfMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductId");

                    b.ToTable("BillOfMaterials");
                });

            modelBuilder.Entity("DOMAIN.Entities.BillOfMaterials.BillOfMaterialItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("BaseUoMId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillOfMaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("CasNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Function")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Grade")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsSubstitutable")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BaseUoMId");

                    b.HasIndex("BillOfMaterialId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("BillOfMaterialItems");
                });

            modelBuilder.Entity("DOMAIN.Entities.BinCards.BinCardInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArNumber")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("BalanceQuantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialBatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("QuantityIssued")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuantityReceived")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WayBill")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialBatchId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UoMId");

                    b.ToTable("BinCardInformation");
                });

            modelBuilder.Entity("DOMAIN.Entities.BinCards.ProductBinCardInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArNumber")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("BalanceQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("QuantityIssued")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuantityReceived")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WayBill")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("UoMId");

                    b.ToTable("ProductBinCardInformation");
                });

            modelBuilder.Entity("DOMAIN.Entities.Charges.Charge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("BillingSheetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BillingSheetId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Charges");
                });

            modelBuilder.Entity("DOMAIN.Entities.Checklists.Checklist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CertificateOfAnalysisDelivered")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CheckedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ConsignmentCarrierStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DistributedRequisitionMaterialId")
                        .HasColumnType("uuid");

                    b.Property<int>("IntactnessStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ShipmentInvoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("VisibleLabelling")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DistributedRequisitionMaterialId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ShipmentInvoiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Checklists");
                });

            modelBuilder.Entity("DOMAIN.Entities.Configurations.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<int>("MaximumNameLength")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumNameLength")
                        .HasColumnType("integer");

                    b.Property<string>("ModelType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("NamingType")
                        .HasColumnType("integer");

                    b.Property<string>("Prefix")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("DOMAIN.Entities.Countries.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DOMAIN.Entities.Currencies.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("DOMAIN.Entities.Departments.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DOMAIN.Entities.Designations.Designation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("DOMAIN.Entities.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DesignationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("GhanaCardNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Religion")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ReportingManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResidentialAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SsnitNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StaffNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ReportingManagerId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.FormAssignee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("UserId");

                    b.ToTable("FormAssignees");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.FormField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FormSectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<string>("Response")
                        .HasMaxLength(1000000)
                        .HasColumnType("character varying(1000000)");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FormSectionId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("FormFields");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.FormResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FormFieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FormId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasMaxLength(100000)
                        .HasColumnType("character varying(100000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FormFieldId");

                    b.HasIndex("FormId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ResponseId");

                    b.ToTable("FormResponses");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.FormReviewer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("UserId");

                    b.ToTable("FormReviewers");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.FormSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FormId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("FormSections");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsMultiSelect")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Validation")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FormId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("DOMAIN.Entities.Grns.Grn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierName")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GrnNumber")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VehicleNumber")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Grns");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.FinishedGoodsTransferNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BatchManufacturingRecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FromWarehouseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PackageStyleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductionActivityStepId")
                        .HasColumnType("uuid");

                    b.Property<string>("QarNumber")
                        .HasColumnType("text");

                    b.Property<decimal>("QuantityPerPack")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ToWarehouseId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BatchManufacturingRecordId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FromWarehouseId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("PackageStyleId");

                    b.HasIndex("ProductionActivityStepId");

                    b.HasIndex("ToWarehouseId");

                    b.HasIndex("UoMId");

                    b.ToTable("FinishedGoodsTransferNotes");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.FinishedProductBatchEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ConsumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ConsumptionWarehouseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("ConsumptionWarehouseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("FinishedProductBatchEvents");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.FinishedProductBatchMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FromWarehouseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("MovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MovedById")
                        .HasColumnType("uuid");

                    b.Property<int>("MovementType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ToWarehouseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FromWarehouseId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MovedById");

                    b.HasIndex("ToWarehouseId");

                    b.ToTable("FinishedProductBatchMovements");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.MassMaterialBatchMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FromWarehouseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("MovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MovedById")
                        .HasColumnType("uuid");

                    b.Property<int>("MovementType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ToWarehouseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FromWarehouseId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MovedById");

                    b.HasIndex("ToWarehouseId");

                    b.ToTable("MassMaterialBatchMovements");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.MaterialBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid?>("ChecklistId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<decimal>("ConsumedQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ContainerPackageStyleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateRejected")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GrnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ManufacturingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfContainers")
                        .HasColumnType("integer");

                    b.Property<decimal>("QuantityAssigned")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuantityPerContainer")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("RetestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StockTransferSourceId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WarehouseArrivalLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistId");

                    b.HasIndex("ContainerPackageStyleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GrnId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("StockTransferSourceId");

                    b.HasIndex("UoMId");

                    b.HasIndex("WarehouseArrivalLocationId");

                    b.ToTable("MaterialBatches");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.MaterialBatchEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ConsumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ConsumptionWarehouseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("ConsumptionWarehouseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("MaterialBatchEvents");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.MaterialBatchReservedQuantity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialBatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionScheduleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialBatchId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionScheduleId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("MaterialBatchReservedQuantities");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.Sr", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("GrossWeight")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialBatchId")
                        .HasColumnType("uuid");

                    b.Property<string>("SrNumber")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid?>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialBatchId");

                    b.HasIndex("UoMId");

                    b.ToTable("Srs");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alphabet")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaximumStockLevel")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumStockLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Pharmacopoeia")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ReOrderLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialCategoryId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.MaterialCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<int>("MaterialKind")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("MaterialCategories");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.MaterialType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("DOMAIN.Entities.Organizations.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("DOMAIN.Entities.Procurement.Manufacturers.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidityDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("DOMAIN.Entities.Procurement.Manufacturers.ManufacturerMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MaterialId");

                    b.ToTable("ManufacturerMaterials");
                });

            modelBuilder.Entity("DOMAIN.Entities.Procurement.Suppliers.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("DOMAIN.Entities.Procurement.Suppliers.SupplierManufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("QuantityPerPack")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierManufacturers");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.MasterProductionSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlannedQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductId");

                    b.ToTable("MasterProductionSchedule");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.Packing.FinalPacking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AverageVolumeFilledPerBottle")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BatchSize")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ExpectedYield")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<decimal>("LeftOver")
                        .HasColumnType("numeric");

                    b.Property<decimal>("NUmberOfFullShipperPacked")
                        .HasColumnType("numeric");

                    b.Property<decimal>("NumberOfBottlesPerShipper")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PackSize")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductionActivityStepId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionScheduleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("QualityControlAnalyticalSample")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RetainedSamples")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StabilitySamples")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalGainOrLoss")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalNumberOfBottles")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalQuantityPacked")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("YieldTotalQuantityPacked")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionActivityStepId");

                    b.HasIndex("ProductionScheduleId");

                    b.ToTable("FinalPackings");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.Packing.FinalPackingMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FinalPackingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PackedQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PercentageLoss")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ReceivedQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RejectedQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ReturnedQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SampledQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SubsequentDeliveredQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalAccountedForQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalReceivedQuantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FinalPackingId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.ToTable("FinalPackingMaterials");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("ScheduledEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ScheduledStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("ProductionSchedules");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.ProductionScheduleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionScheduleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductionScheduleId");

                    b.HasIndex("UomId");

                    b.ToTable("ProductionScheduleItems");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.ProductionScheduleProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("BatchSize")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionScheduleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionScheduleId");

                    b.ToTable("ProductionScheduleProducts");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.StockTransfers.StockTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductionActivityStepId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductionScheduleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("RequiredQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionActivityStepId");

                    b.HasIndex("ProductionScheduleId");

                    b.HasIndex("UoMId");

                    b.ToTable("StockTransfers");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.StockTransfers.StockTransferSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FromDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("IssuedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("StockTransferId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FromDepartmentId");

                    b.HasIndex("IssuedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("StockTransferId");

                    b.HasIndex("ToDepartmentId");

                    b.ToTable("StockTransferSources");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Equipments.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CapacityQuantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsStorage")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("MachineId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("RelevanceCheck")
                        .HasColumnType("boolean");

                    b.Property<string>("StorageLocation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("UoMId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.FinishedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DosageForm")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("numeric");

                    b.Property<string>("Strength")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("UoMId");

                    b.ToTable("FinishedProducts");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.PackageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("PackageTypes");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionUse")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("BasePackingQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("BasePackingUomId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("BaseUomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("FdaRegistrationNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilledWeight")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("FullBatchSize")
                        .HasColumnType("numeric");

                    b.Property<string>("GenericName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("MasterFormulaNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PackageStyle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PrimaryPackDescription")
                        .HasMaxLength(1000000)
                        .HasColumnType("character varying(1000000)");

                    b.Property<string>("SecondaryPackDescription")
                        .HasMaxLength(1000000)
                        .HasColumnType("character varying(1000000)");

                    b.Property<string>("ShelfLife")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StorageCondition")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TertiaryPackDescription")
                        .HasMaxLength(1000000)
                        .HasColumnType("character varying(1000000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BasePackingUomId");

                    b.HasIndex("BaseUomId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.ProductBillOfMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillOfMaterialId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BillOfMaterialId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBillOfMaterials");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.ProductPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("BaseUoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DirectLinkMaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("MaterialThickness")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OtherStandards")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("PackingExcessMargin")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitCapacity")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BaseUoMId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DirectLinkMaterialId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPackages");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.BatchManufacturingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("BatchQuantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("IssuedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ManufacturingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionActivityStepId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionScheduleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IssuedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionActivityStepId");

                    b.HasIndex("ProductionScheduleId");

                    b.ToTable("BatchManufacturingRecords");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.BatchPackagingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("BatchQuantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("IssuedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ManufacturingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionActivityStepId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionScheduleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IssuedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionActivityStepId");

                    b.HasIndex("ProductionScheduleId");

                    b.ToTable("BatchPackagingRecords");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionScheduleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionScheduleId");

                    b.ToTable("ProductionActivities");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("ProductionActivityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductionActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionActivityLogs");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivityStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductionActivityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("OperationId");

                    b.HasIndex("ProductionActivityId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("ProductionActivitySteps");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivityStepResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionActivityStepId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductionActivityStepId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ProductionActivityStepResources");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivityStepUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionActivityStepId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductionActivityStepId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionActivityStepUsers");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivityStepWorkCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionActivityStepId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkCenterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductionActivityStepId");

                    b.HasIndex("WorkCenterId");

                    b.ToTable("ProductionActivityStepWorkCenters");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.BatchItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchaseOrderInvoiceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PurchaseOrderInvoiceId");

                    b.ToTable("BatchItem");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.BillingSheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<string>("BillOfLading")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Code")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ContainerNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ContainerPackageStyleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DemurrageStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpectedArrivalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FreeTimeDuration")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("FreeTimeExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("NumberOfPackages")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PackageDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContainerPackageStyleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("SupplierId");

                    b.ToTable("BillingSheets");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.BillingSheetApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("BillingSheetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BillingSheetId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("BillingSheetApprovals");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AmountInFigures")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeliveryModeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Insurance")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("ProFormaInvoiceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("SeaFreight")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SourceRequisitionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TermsOfPaymentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalCifValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalFobValue")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeliveryModeId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("SourceRequisitionId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TermsOfPaymentId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.PurchaseOrderApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseOrderApprovals");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.PurchaseOrderCharge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchaseOrderInvoiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("PurchaseOrderInvoiceId");

                    b.ToTable("PurchaseOrderCharge");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.PurchaseOrderInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderInvoices");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.PurchaseOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("UoMId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.RevisedPurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrencyBeforeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialBeforeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceBefore")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PurchaseOrderItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("QuantityBefore")
                        .HasColumnType("numeric");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UoMBeforeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UoMId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyBeforeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MaterialBeforeId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("PurchaseOrderItemId");

                    b.HasIndex("UoMBeforeId");

                    b.HasIndex("UoMId");

                    b.ToTable("RevisedPurchaseOrder");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.RevisedPurchaseOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RevisedPurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("RevisedPurchaseOrderId");

                    b.HasIndex("UoMId");

                    b.ToTable("RevisedPurchaseOrderItem");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.Requisition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpectedDelivery")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductionActivityStepId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionScheduleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestedById")
                        .HasColumnType("uuid");

                    b.Property<int>("RequisitionType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionActivityStepId");

                    b.HasIndex("ProductionScheduleId");

                    b.HasIndex("RequestedById");

                    b.ToTable("Requisitions");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.RequisitionApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequisitionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RequisitionApprovals");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.RequisitionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuantityReceived")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("RequisitionId");

                    b.HasIndex("UoMId");

                    b.ToTable("RequisitionItems");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.SourceRequisition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SentQuotationRequestAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("SupplierId");

                    b.ToTable("SourceRequisitions");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.SourceRequisitionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<Guid>("SourceRequisitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SourceRequisitionId");

                    b.HasIndex("UoMId");

                    b.ToTable("SourceRequisitionItems");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.SupplierQuotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("ReceivedQuotation")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SourceRequisitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("SourceRequisitionId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierQuotations");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.SupplierQuotationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("QuotedPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierQuotationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SupplierQuotationId");

                    b.HasIndex("UoMId");

                    b.ToTable("SupplierQuotationItems");
                });

            modelBuilder.Entity("DOMAIN.Entities.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("DOMAIN.Entities.Routes.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EstimatedTime")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("OperationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("DOMAIN.Entities.Routes.RouteResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ResourceId");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteResources");
                });

            modelBuilder.Entity("DOMAIN.Entities.Routes.RouteResponsibleRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("RoleId");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteResponsibleRoles");
                });

            modelBuilder.Entity("DOMAIN.Entities.Routes.RouteResponsibleUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("RouteId");

                    b.HasIndex("UserId");

                    b.ToTable("RouteResponsibleUsers");
                });

            modelBuilder.Entity("DOMAIN.Entities.Routes.RouteWorkCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkCenterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("RouteId");

                    b.HasIndex("WorkCenterId");

                    b.ToTable("RouteWorkCenters");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentDiscrepancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShipmentDocumentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ShipmentDocumentId");

                    b.ToTable("ShipmentDiscrepancies");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentDiscrepancyItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("ReceivedQuantity")
                        .HasColumnType("numeric");

                    b.Property<bool>("Resolved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ShipmentDiscrepancyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ShipmentDiscrepancyId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UoMId");

                    b.ToTable("ShipmentDiscrepancyItem");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentDiscrepancyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("ShipmentDiscrepancyTypes");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArrivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ClearedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("CompletedDistributionAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ShipmentInvoiceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TransitStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ShipmentInvoiceId");

                    b.ToTable("ShipmentDocuments");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("SupplierId");

                    b.ToTable("ShipmentInvoices");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentInvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Distributed")
                        .HasColumnType("boolean");

                    b.Property<decimal>("ExpectedQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("ReceivedQuantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ShipmentInvoiceId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UoMId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("ShipmentInvoiceId");

                    b.HasIndex("UoMId");

                    b.ToTable("ShipmentInvoiceItems");
                });

            modelBuilder.Entity("DOMAIN.Entities.Sites.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("DOMAIN.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Signature")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.DistributedFinishedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArrivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("BatchManufacturingRecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DistributedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TransferNoteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WarehouseArrivalLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BatchManufacturingRecordId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransferNoteId");

                    b.HasIndex("UomId");

                    b.HasIndex("WarehouseArrivalLocationId");

                    b.ToTable("DistributedFinishedProducts");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.DistributedRequisitionMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArrivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CheckedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DistributedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("GrnGeneratedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("RequisitionItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ShipmentInvoiceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WarehouseArrivalLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("RequisitionItemId");

                    b.HasIndex("ShipmentInvoiceId");

                    b.HasIndex("UomId");

                    b.HasIndex("WarehouseArrivalLocationId");

                    b.ToTable("DistributedRequisitionMaterials");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.MaterialItemDistribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DistributedRequisitionMaterialId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ShipmentInvoiceItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DistributedRequisitionMaterialId");

                    b.HasIndex("ShipmentInvoiceItemId");

                    b.ToTable("MaterialItemDistributions");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.ShelfMaterialBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialBatchId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WarehouseLocationShelfId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MaterialBatchId");

                    b.HasIndex("UomId");

                    b.HasIndex("WarehouseLocationShelfId");

                    b.ToTable("ShelfMaterialBatches");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.WarehouseArrivalLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FloorName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("WarehouseId")
                        .IsUnique();

                    b.ToTable("WarehouseArrivalLocations");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.WarehouseLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FloorName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseLocations");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.WarehouseLocationRack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WarehouseLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("WarehouseLocationId");

                    b.ToTable("WarehouseLocationRacks");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.WarehouseLocationShelf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WarehouseLocationRackId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("WarehouseLocationRackId");

                    b.ToTable("WarehouseLocationShelves");
                });

            modelBuilder.Entity("DOMAIN.Entities.WorkOrders.ProductionStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ResourceId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("ProductionSteps");
                });

            modelBuilder.Entity("DOMAIN.Entities.WorkOrders.WorkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastDeletedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MasterProductionScheduleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductionScheduleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastDeletedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("MasterProductionScheduleId");

                    b.HasIndex("ProductionScheduleId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("DepartmentDesignation", b =>
                {
                    b.Property<Guid>("DepartmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DesignationsId")
                        .HasColumnType("uuid");

                    b.HasKey("DepartmentsId", "DesignationsId");

                    b.HasIndex("DesignationsId");

                    b.ToTable("DepartmentDesignation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("roleclaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userclaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("userlogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("userroles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("usertokens", (string)null);
                });

            modelBuilder.Entity("DOMAIN.Entities.Approvals.Approval", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Approvals.ApprovalStage", b =>
                {
                    b.HasOne("DOMAIN.Entities.Approvals.Approval", "Approval")
                        .WithMany("ApprovalStages")
                        .HasForeignKey("ApprovalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("DOMAIN.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Approval");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Entities.Attachments.Attachment", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Auth.PasswordReset", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Entities.Auth.RefreshToken", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.DeliveryMode", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.Operation", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.PackageStyle", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.Resource", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.TermsOfPayment", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.UnitOfMeasure", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Base.WorkCenter", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.BillOfMaterials.BillOfMaterial", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DOMAIN.Entities.BillOfMaterials.BillOfMaterialItem", b =>
                {
                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "BaseUoM")
                        .WithMany()
                        .HasForeignKey("BaseUoMId");

                    b.HasOne("DOMAIN.Entities.BillOfMaterials.BillOfMaterial", "BillOfMaterial")
                        .WithMany("Items")
                        .HasForeignKey("BillOfMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Materials.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId");

                    b.Navigation("BaseUoM");

                    b.Navigation("BillOfMaterial");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("DOMAIN.Entities.BinCards.BinCardInformation", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Batch.MaterialBatch", "MaterialBatch")
                        .WithMany()
                        .HasForeignKey("MaterialBatchId");

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("MaterialBatch");

                    b.Navigation("Product");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.BinCards.ProductBinCardInformation", b =>
                {
                    b.HasOne("DOMAIN.Entities.Products.Product", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId");

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId");

                    b.Navigation("Batch");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Product");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.Charges.Charge", b =>
                {
                    b.HasOne("DOMAIN.Entities.PurchaseOrders.BillingSheet", null)
                        .WithMany("Charges")
                        .HasForeignKey("BillingSheetId");

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Currency");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Checklists.Checklist", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Warehouses.DistributedRequisitionMaterial", "DistributedRequisitionMaterial")
                        .WithMany("CheckLists")
                        .HasForeignKey("DistributedRequisitionMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Procurement.Manufacturers.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("DOMAIN.Entities.Shipments.ShipmentInvoice", "ShipmentInvoice")
                        .WithMany()
                        .HasForeignKey("ShipmentInvoiceId");

                    b.HasOne("DOMAIN.Entities.Procurement.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DistributedRequisitionMaterial");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Manufacturer");

                    b.Navigation("Material");

                    b.Navigation("ShipmentInvoice");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DOMAIN.Entities.Configurations.Configuration", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Countries.Country", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Currencies.Currency", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Designations.Designation", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Employees.Employee", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Departments.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DOMAIN.Entities.Designations.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "ReportingManager")
                        .WithMany()
                        .HasForeignKey("ReportingManagerId");

                    b.OwnsMany("DOMAIN.Entities.Children.Child", "Children", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("DateOfBirth")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FullName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("Gender")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("EmployeeId");

                            b1.ToTable("Children");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsMany("DOMAIN.Entities.EducationHistories.Education", "EducationBackground", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Major")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("QualificationEarned")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("SchoolName")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id");

                            b1.HasIndex("EmployeeId");

                            b1.ToTable("Education");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsMany("DOMAIN.Entities.EmployeeHistories.EmploymentHistory", "EmploymentHistory", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CompanyName")
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)");

                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Position")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id");

                            b1.HasIndex("EmployeeId");

                            b1.ToTable("EmploymentHistories");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("DOMAIN.Entities.EmergencyContacts.EmergencyContact", "EmergencyContact", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ContactNumber")
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)");

                            b1.Property<string>("FullName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Relationship")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("ResidentialAddress")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("DOMAIN.Entities.Persons.Person", "Father", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FullName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("LifeStatus")
                                .HasColumnType("integer");

                            b1.Property<string>("Occupation")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("PhoneNumber")
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("DOMAIN.Entities.Persons.Person", "Mother", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FullName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("LifeStatus")
                                .HasColumnType("integer");

                            b1.Property<string>("Occupation")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("PhoneNumber")
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("DOMAIN.Entities.EmergencyContacts.EmergencyContact", "NextOfKin", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ContactNumber")
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)");

                            b1.Property<string>("FullName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Relationship")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("ResidentialAddress")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("DOMAIN.Entities.Persons.Person", "Spouse", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FullName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("LifeStatus")
                                .HasColumnType("integer");

                            b1.Property<string>("Occupation")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("PhoneNumber")
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsMany("DOMAIN.Entities.Siblings.Sibling", "Siblings", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Contact")
                                .HasColumnType("text");

                            b1.Property<string>("FullName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("Gender")
                                .HasColumnType("integer");

                            b1.HasKey("EmployeeId", "Id");

                            b1.ToTable("Sibling");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Children");

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("EducationBackground");

                    b.Navigation("EmergencyContact");

                    b.Navigation("EmploymentHistory");

                    b.Navigation("Father");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Mother");

                    b.Navigation("NextOfKin");

                    b.Navigation("ReportingManager");

                    b.Navigation("Siblings");

                    b.Navigation("Spouse");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.Form", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.FormAssignee", b =>
                {
                    b.HasOne("DOMAIN.Entities.Forms.Form", "Form")
                        .WithMany("Assignees")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.FormField", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Forms.FormSection", "FormSection")
                        .WithMany("Fields")
                        .HasForeignKey("FormSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Forms.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");

                    b.Navigation("Assignee");

                    b.Navigation("CreatedBy");

                    b.Navigation("FormSection");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Question");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.FormResponse", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Forms.FormField", "FormField")
                        .WithMany()
                        .HasForeignKey("FormFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Forms.Form", null)
                        .WithMany("Responses")
                        .HasForeignKey("FormId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Forms.Response", "Response")
                        .WithMany("FormResponses")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("FormField");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.FormReviewer", b =>
                {
                    b.HasOne("DOMAIN.Entities.Forms.Form", "Form")
                        .WithMany("Reviewers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.FormSection", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Forms.Form", "Form")
                        .WithMany("Sections")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Form");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.Question", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.QuestionOption", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Forms.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.Response", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Forms.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Form");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Grns.Grn", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.FinishedGoodsTransferNote", b =>
                {
                    b.HasOne("DOMAIN.Entities.Products.Production.BatchManufacturingRecord", "BatchManufacturingRecord")
                        .WithMany()
                        .HasForeignKey("BatchManufacturingRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Warehouses.Warehouse", "FromWarehouse")
                        .WithMany()
                        .HasForeignKey("FromWarehouseId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Base.PackageStyle", "PackageStyle")
                        .WithMany()
                        .HasForeignKey("PackageStyleId");

                    b.HasOne("DOMAIN.Entities.Products.Production.ProductionActivityStep", "ProductionActivityStep")
                        .WithMany()
                        .HasForeignKey("ProductionActivityStepId");

                    b.HasOne("DOMAIN.Entities.Warehouses.Warehouse", "ToWarehouse")
                        .WithMany()
                        .HasForeignKey("ToWarehouseId");

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId");

                    b.Navigation("BatchManufacturingRecord");

                    b.Navigation("CreatedBy");

                    b.Navigation("FromWarehouse");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("PackageStyle");

                    b.Navigation("ProductionActivityStep");

                    b.Navigation("ToWarehouse");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.FinishedProductBatchEvent", b =>
                {
                    b.HasOne("DOMAIN.Entities.Products.Product", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Warehouses.Warehouse", "ConsumptionWarehouse")
                        .WithMany()
                        .HasForeignKey("ConsumptionWarehouseId");

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("ConsumptionWarehouse");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.FinishedProductBatchMovement", b =>
                {
                    b.HasOne("DOMAIN.Entities.Products.Product", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Warehouses.Warehouse", "FromWarehouse")
                        .WithMany()
                        .HasForeignKey("FromWarehouseId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "MovedBy")
                        .WithMany()
                        .HasForeignKey("MovedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Warehouses.Warehouse", "ToWarehouse")
                        .WithMany()
                        .HasForeignKey("ToWarehouseId");

                    b.Navigation("Batch");

                    b.Navigation("CreatedBy");

                    b.Navigation("FromWarehouse");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("MovedBy");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.MassMaterialBatchMovement", b =>
                {
                    b.HasOne("DOMAIN.Entities.Materials.Batch.MaterialBatch", "Batch")
                        .WithMany("MassMovements")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Warehouses.Warehouse", "FromWarehouse")
                        .WithMany()
                        .HasForeignKey("FromWarehouseId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "MovedBy")
                        .WithMany()
                        .HasForeignKey("MovedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Warehouses.Warehouse", "ToWarehouse")
                        .WithMany()
                        .HasForeignKey("ToWarehouseId");

                    b.Navigation("Batch");

                    b.Navigation("CreatedBy");

                    b.Navigation("FromWarehouse");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("MovedBy");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.MaterialBatch", b =>
                {
                    b.HasOne("DOMAIN.Entities.Checklists.Checklist", "Checklist")
                        .WithMany("MaterialBatches")
                        .HasForeignKey("ChecklistId");

                    b.HasOne("DOMAIN.Entities.Base.PackageStyle", "ContainerPackageStyle")
                        .WithMany()
                        .HasForeignKey("ContainerPackageStyleId");

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Grns.Grn", "Grn")
                        .WithMany("MaterialBatches")
                        .HasForeignKey("GrnId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany("Batches")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.StockTransfers.StockTransferSource", "StockTransferSource")
                        .WithMany()
                        .HasForeignKey("StockTransferSourceId");

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId");

                    b.HasOne("DOMAIN.Entities.Warehouses.WarehouseArrivalLocation", null)
                        .WithMany("DistributedStockTransferBatches")
                        .HasForeignKey("WarehouseArrivalLocationId");

                    b.Navigation("Checklist");

                    b.Navigation("ContainerPackageStyle");

                    b.Navigation("CreatedBy");

                    b.Navigation("Grn");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");

                    b.Navigation("StockTransferSource");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.MaterialBatchEvent", b =>
                {
                    b.HasOne("DOMAIN.Entities.Materials.Batch.MaterialBatch", "Batch")
                        .WithMany("Events")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Warehouses.Warehouse", "ConsumptionWarehouse")
                        .WithMany()
                        .HasForeignKey("ConsumptionWarehouseId");

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("ConsumptionWarehouse");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.MaterialBatchReservedQuantity", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Batch.MaterialBatch", "MaterialBatch")
                        .WithMany("ReservedQuantities")
                        .HasForeignKey("MaterialBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", "ProductionSchedule")
                        .WithMany()
                        .HasForeignKey("ProductionScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Warehouses.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("MaterialBatch");

                    b.Navigation("Product");

                    b.Navigation("ProductionSchedule");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.Sr", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Batch.MaterialBatch", "MaterialBatch")
                        .WithMany("SampleWeights")
                        .HasForeignKey("MaterialBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("MaterialBatch");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Material", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.MaterialCategory", "MaterialCategory")
                        .WithMany()
                        .HasForeignKey("MaterialCategoryId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("MaterialCategory");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.MaterialCategory", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.MaterialType", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Organizations.Organization", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Procurement.Manufacturers.Manufacturer", b =>
                {
                    b.HasOne("DOMAIN.Entities.Countries.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Procurement.Manufacturers.ManufacturerMaterial", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Procurement.Manufacturers.Manufacturer", "Manufacturer")
                        .WithMany("Materials")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Manufacturer");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("DOMAIN.Entities.Procurement.Suppliers.Supplier", b =>
                {
                    b.HasOne("DOMAIN.Entities.Countries.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("Currency");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Procurement.Suppliers.SupplierManufacturer", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Procurement.Manufacturers.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("DOMAIN.Entities.Procurement.Suppliers.Supplier", "Supplier")
                        .WithMany("AssociatedManufacturers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Manufacturer");

                    b.Navigation("Material");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.MasterProductionSchedule", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.Packing.FinalPacking", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Products.Production.ProductionActivityStep", "ProductionActivityStep")
                        .WithMany()
                        .HasForeignKey("ProductionActivityStepId");

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", "ProductionSchedule")
                        .WithMany()
                        .HasForeignKey("ProductionScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Product");

                    b.Navigation("ProductionActivityStep");

                    b.Navigation("ProductionSchedule");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.Packing.FinalPackingMaterial", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.Packing.FinalPacking", "FinalPacking")
                        .WithMany("Materials")
                        .HasForeignKey("FinalPackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("FinalPacking");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.ProductionScheduleItem", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", "ProductionSchedule")
                        .WithMany()
                        .HasForeignKey("ProductionScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UomId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");

                    b.Navigation("ProductionSchedule");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.ProductionScheduleProduct", b =>
                {
                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", "ProductionSchedule")
                        .WithMany("Products")
                        .HasForeignKey("ProductionScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductionSchedule");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.StockTransfers.StockTransfer", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("DOMAIN.Entities.Products.Production.ProductionActivityStep", "ProductionActivityStep")
                        .WithMany()
                        .HasForeignKey("ProductionActivityStepId");

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", "ProductionSchedule")
                        .WithMany()
                        .HasForeignKey("ProductionScheduleId");

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");

                    b.Navigation("Product");

                    b.Navigation("ProductionActivityStep");

                    b.Navigation("ProductionSchedule");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.StockTransfers.StockTransferSource", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Departments.Department", "FromDepartment")
                        .WithMany()
                        .HasForeignKey("FromDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.StockTransfers.StockTransfer", "StockTransfer")
                        .WithMany("Sources")
                        .HasForeignKey("StockTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Departments.Department", "ToDepartment")
                        .WithMany()
                        .HasForeignKey("ToDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("FromDepartment");

                    b.Navigation("IssuedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("StockTransfer");

                    b.Navigation("ToDepartment");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Equipments.Equipment", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Departments.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.FinishedProduct", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany("FinishedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Product");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.PackageType", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Product", b =>
                {
                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "BasePackingUoM")
                        .WithMany()
                        .HasForeignKey("BasePackingUomId");

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "BaseUoM")
                        .WithMany()
                        .HasForeignKey("BaseUomId");

                    b.HasOne("DOMAIN.Entities.Products.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Departments.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DOMAIN.Entities.Products.Equipments.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("BasePackingUoM");

                    b.Navigation("BaseUoM");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("Equipment");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.ProductBillOfMaterial", b =>
                {
                    b.HasOne("DOMAIN.Entities.BillOfMaterials.BillOfMaterial", "BillOfMaterial")
                        .WithMany()
                        .HasForeignKey("BillOfMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillOfMaterial");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.ProductCategory", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.ProductPackage", b =>
                {
                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "BaseUoM")
                        .WithMany()
                        .HasForeignKey("BaseUoMId");

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "DirectLinkMaterial")
                        .WithMany()
                        .HasForeignKey("DirectLinkMaterialId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany("Packages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseUoM");

                    b.Navigation("CreatedBy");

                    b.Navigation("DirectLinkMaterial");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.BatchManufacturingRecord", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Products.Production.ProductionActivityStep", "ProductionActivityStep")
                        .WithMany()
                        .HasForeignKey("ProductionActivityStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", "ProductionSchedule")
                        .WithMany()
                        .HasForeignKey("ProductionScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("IssuedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Product");

                    b.Navigation("ProductionActivityStep");

                    b.Navigation("ProductionSchedule");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.BatchPackagingRecord", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Products.Production.ProductionActivityStep", "ProductionActivityStep")
                        .WithMany()
                        .HasForeignKey("ProductionActivityStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", "ProductionSchedule")
                        .WithMany()
                        .HasForeignKey("ProductionScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("IssuedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Product");

                    b.Navigation("ProductionActivityStep");

                    b.Navigation("ProductionSchedule");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivity", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", "ProductionSchedule")
                        .WithMany()
                        .HasForeignKey("ProductionScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Product");

                    b.Navigation("ProductionSchedule");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivityLog", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Production.ProductionActivity", "ProductionActivity")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("ProductionActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("ProductionActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivityStep", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Base.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Products.Production.ProductionActivity", "ProductionActivity")
                        .WithMany("Steps")
                        .HasForeignKey("ProductionActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Forms.Form", "WorkFlow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Operation");

                    b.Navigation("ProductionActivity");

                    b.Navigation("WorkFlow");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivityStepResource", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Production.ProductionActivityStep", "ProductionActivityStep")
                        .WithMany("Resources")
                        .HasForeignKey("ProductionActivityStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("ProductionActivityStep");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivityStepUser", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Production.ProductionActivityStep", "ProductionActivityStep")
                        .WithMany("ResponsibleUsers")
                        .HasForeignKey("ProductionActivityStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("ProductionActivityStep");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivityStepWorkCenter", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Production.ProductionActivityStep", "ProductionActivityStep")
                        .WithMany("WorkCenters")
                        .HasForeignKey("ProductionActivityStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.WorkCenter", "WorkCenter")
                        .WithMany()
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("ProductionActivityStep");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.BatchItem", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Procurement.Manufacturers.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.PurchaseOrders.PurchaseOrderInvoice", "PurchaseOrderInvoice")
                        .WithMany("BatchItems")
                        .HasForeignKey("PurchaseOrderInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Manufacturer");

                    b.Navigation("PurchaseOrderInvoice");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.BillingSheet", b =>
                {
                    b.HasOne("DOMAIN.Entities.Base.PackageStyle", "ContainerPackageStyle")
                        .WithMany()
                        .HasForeignKey("ContainerPackageStyleId");

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Shipments.ShipmentInvoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Procurement.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("ContainerPackageStyle");

                    b.Navigation("CreatedBy");

                    b.Navigation("Invoice");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.BillingSheetApproval", b =>
                {
                    b.HasOne("DOMAIN.Entities.PurchaseOrders.BillingSheet", "BillingSheet")
                        .WithMany("Approvals")
                        .HasForeignKey("BillingSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("DOMAIN.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("BillingSheet");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.PurchaseOrder", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Base.DeliveryMode", "DeliveryMode")
                        .WithMany()
                        .HasForeignKey("DeliveryModeId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Requisitions.SourceRequisition", "SourceRequisition")
                        .WithMany()
                        .HasForeignKey("SourceRequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Procurement.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.TermsOfPayment", "TermsOfPayment")
                        .WithMany()
                        .HasForeignKey("TermsOfPaymentId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeliveryMode");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("SourceRequisition");

                    b.Navigation("Supplier");

                    b.Navigation("TermsOfPayment");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.PurchaseOrderApproval", b =>
                {
                    b.HasOne("DOMAIN.Entities.PurchaseOrders.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Approvals")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("DOMAIN.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.PurchaseOrderCharge", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.PurchaseOrders.PurchaseOrderInvoice", "PurchaseOrderInvoice")
                        .WithMany("Charges")
                        .HasForeignKey("PurchaseOrderInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Currency");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("PurchaseOrderInvoice");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.PurchaseOrderInvoice", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.PurchaseOrders.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.PurchaseOrderItem", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.PurchaseOrders.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Currency");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.RevisedPurchaseOrder", b =>
                {
                    b.HasOne("DOMAIN.Entities.Currencies.Currency", "CurrencyBefore")
                        .WithMany()
                        .HasForeignKey("CurrencyBeforeId");

                    b.HasOne("DOMAIN.Entities.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "MaterialBefore")
                        .WithMany()
                        .HasForeignKey("MaterialBeforeId");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("DOMAIN.Entities.PurchaseOrders.PurchaseOrder", null)
                        .WithMany("RevisedPurchaseOrders")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("DOMAIN.Entities.PurchaseOrders.PurchaseOrderItem", "PurchaseOrderItem")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderItemId");

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UomBefore")
                        .WithMany()
                        .HasForeignKey("UoMBeforeId");

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId");

                    b.Navigation("Currency");

                    b.Navigation("CurrencyBefore");

                    b.Navigation("Material");

                    b.Navigation("MaterialBefore");

                    b.Navigation("PurchaseOrderItem");

                    b.Navigation("UoM");

                    b.Navigation("UomBefore");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.RevisedPurchaseOrderItem", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.PurchaseOrders.RevisedPurchaseOrder", "RevisedPurchaseOrder")
                        .WithMany()
                        .HasForeignKey("RevisedPurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Currency");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");

                    b.Navigation("RevisedPurchaseOrder");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.Requisition", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Departments.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Products.Production.ProductionActivityStep", "ProductionActivityStep")
                        .WithMany()
                        .HasForeignKey("ProductionActivityStepId");

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", "ProductionSchedule")
                        .WithMany()
                        .HasForeignKey("ProductionScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Product");

                    b.Navigation("ProductionActivityStep");

                    b.Navigation("ProductionSchedule");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.RequisitionApproval", b =>
                {
                    b.HasOne("DOMAIN.Entities.Requisitions.Requisition", "Requisition")
                        .WithMany("Approvals")
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("DOMAIN.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Requisition");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.RequisitionItem", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Requisitions.Requisition", "Requisition")
                        .WithMany("Items")
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");

                    b.Navigation("Requisition");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.SourceRequisition", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Procurement.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.SourceRequisitionItem", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Requisitions.SourceRequisition", "SourceRequisition")
                        .WithMany("Items")
                        .HasForeignKey("SourceRequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");

                    b.Navigation("SourceRequisition");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.SupplierQuotation", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Requisitions.SourceRequisition", "SourceRequisition")
                        .WithMany()
                        .HasForeignKey("SourceRequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Procurement.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("SourceRequisition");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.SupplierQuotationItem", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Requisitions.SupplierQuotation", "SupplierQuotation")
                        .WithMany("Items")
                        .HasForeignKey("SupplierQuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");

                    b.Navigation("SupplierQuotation");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.Routes.Route", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Base.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany("Routes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Forms.Form", "WorkFlow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Operation");

                    b.Navigation("Product");

                    b.Navigation("WorkFlow");
                });

            modelBuilder.Entity("DOMAIN.Entities.Routes.RouteResource", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Base.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Routes.Route", "Route")
                        .WithMany("Resources")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Resource");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("DOMAIN.Entities.Routes.RouteResponsibleRole", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Routes.Route", "Route")
                        .WithMany("ResponsibleRoles")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Role");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("DOMAIN.Entities.Routes.RouteResponsibleUser", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Routes.Route", "Route")
                        .WithMany("ResponsibleUsers")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DOMAIN.Entities.Routes.RouteWorkCenter", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Routes.Route", "Route")
                        .WithMany("WorkCenters")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.WorkCenter", "WorkCenter")
                        .WithMany()
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Route");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentDiscrepancy", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Shipments.ShipmentDocument", "ShipmentDocument")
                        .WithMany("Discrepancies")
                        .HasForeignKey("ShipmentDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("ShipmentDocument");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentDiscrepancyItem", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Shipments.ShipmentDiscrepancy", "ShipmentDiscrepancy")
                        .WithMany("Items")
                        .HasForeignKey("ShipmentDiscrepancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Shipments.ShipmentDiscrepancyType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");

                    b.Navigation("ShipmentDiscrepancy");

                    b.Navigation("Type");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentDiscrepancyType", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentDocument", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Shipments.ShipmentInvoice", "ShipmentInvoice")
                        .WithMany()
                        .HasForeignKey("ShipmentInvoiceId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("ShipmentInvoice");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentInvoice", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Procurement.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Currency");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentInvoiceItem", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Procurement.Manufacturers.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.PurchaseOrders.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Shipments.ShipmentInvoice", "ShipmentInvoice")
                        .WithMany("Items")
                        .HasForeignKey("ShipmentInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Currency");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Manufacturer");

                    b.Navigation("Material");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("ShipmentInvoice");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("DOMAIN.Entities.Sites.Site", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Users.User", b =>
                {
                    b.HasOne("DOMAIN.Entities.Departments.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.DistributedFinishedProduct", b =>
                {
                    b.HasOne("DOMAIN.Entities.Products.Production.BatchManufacturingRecord", "BatchManufacturingRecord")
                        .WithMany()
                        .HasForeignKey("BatchManufacturingRecordId");

                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("DOMAIN.Entities.Materials.Batch.FinishedGoodsTransferNote", "TransferNote")
                        .WithMany()
                        .HasForeignKey("TransferNoteId");

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UomId");

                    b.HasOne("DOMAIN.Entities.Warehouses.WarehouseArrivalLocation", "WarehouseArrivalLocation")
                        .WithMany("DistributedFinishedProducts")
                        .HasForeignKey("WarehouseArrivalLocationId");

                    b.Navigation("BatchManufacturingRecord");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Product");

                    b.Navigation("TransferNote");

                    b.Navigation("UoM");

                    b.Navigation("WarehouseArrivalLocation");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.DistributedRequisitionMaterial", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("DOMAIN.Entities.Requisitions.RequisitionItem", "RequisitionItem")
                        .WithMany()
                        .HasForeignKey("RequisitionItemId");

                    b.HasOne("DOMAIN.Entities.Shipments.ShipmentInvoice", "ShipmentInvoice")
                        .WithMany()
                        .HasForeignKey("ShipmentInvoiceId");

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UomId");

                    b.HasOne("DOMAIN.Entities.Warehouses.WarehouseArrivalLocation", "WarehouseArrivalLocation")
                        .WithMany("DistributedRequisitionMaterials")
                        .HasForeignKey("WarehouseArrivalLocationId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Material");

                    b.Navigation("RequisitionItem");

                    b.Navigation("ShipmentInvoice");

                    b.Navigation("UoM");

                    b.Navigation("WarehouseArrivalLocation");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.MaterialItemDistribution", b =>
                {
                    b.HasOne("DOMAIN.Entities.Warehouses.DistributedRequisitionMaterial", "DistributedRequisitionMaterial")
                        .WithMany("MaterialItemDistributions")
                        .HasForeignKey("DistributedRequisitionMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Shipments.ShipmentInvoiceItem", "ShipmentInvoiceItem")
                        .WithMany()
                        .HasForeignKey("ShipmentInvoiceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DistributedRequisitionMaterial");

                    b.Navigation("ShipmentInvoiceItem");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.ShelfMaterialBatch", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Materials.Batch.MaterialBatch", "MaterialBatch")
                        .WithMany()
                        .HasForeignKey("MaterialBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Base.UnitOfMeasure", "UoM")
                        .WithMany()
                        .HasForeignKey("UomId");

                    b.HasOne("DOMAIN.Entities.Warehouses.WarehouseLocationShelf", "WarehouseLocationShelf")
                        .WithMany("MaterialBatches")
                        .HasForeignKey("WarehouseLocationShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("MaterialBatch");

                    b.Navigation("UoM");

                    b.Navigation("WarehouseLocationShelf");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.Warehouse", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Departments.Department", "Department")
                        .WithMany("Warehouses")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.WarehouseArrivalLocation", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Warehouses.Warehouse", "Warehouse")
                        .WithOne("ArrivalLocation")
                        .HasForeignKey("DOMAIN.Entities.Warehouses.WarehouseArrivalLocation", "WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.WarehouseLocation", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Warehouses.Warehouse", "Warehouse")
                        .WithMany("Locations")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.WarehouseLocationRack", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Warehouses.WarehouseLocation", "WarehouseLocation")
                        .WithMany("Racks")
                        .HasForeignKey("WarehouseLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("WarehouseLocation");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.WarehouseLocationShelf", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Warehouses.WarehouseLocationRack", "WarehouseLocationRack")
                        .WithMany("Shelves")
                        .HasForeignKey("WarehouseLocationRackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("WarehouseLocationRack");
                });

            modelBuilder.Entity("DOMAIN.Entities.WorkOrders.ProductionStep", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.Base.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId");

                    b.HasOne("DOMAIN.Entities.WorkOrders.WorkOrder", "WorkOrder")
                        .WithMany("Steps")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Resource");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("DOMAIN.Entities.WorkOrders.WorkOrder", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastDeletedBy")
                        .WithMany()
                        .HasForeignKey("LastDeletedById");

                    b.HasOne("DOMAIN.Entities.Users.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.MasterProductionSchedule", null)
                        .WithMany("WorkOrders")
                        .HasForeignKey("MasterProductionScheduleId");

                    b.HasOne("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", "ProductionSchedule")
                        .WithMany()
                        .HasForeignKey("ProductionScheduleId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastDeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("ProductionSchedule");
                });

            modelBuilder.Entity("DepartmentDesignation", b =>
                {
                    b.HasOne("DOMAIN.Entities.Departments.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Designations.Designation", null)
                        .WithMany()
                        .HasForeignKey("DesignationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("DOMAIN.Entities.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("DOMAIN.Entities.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOMAIN.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DOMAIN.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DOMAIN.Entities.Approvals.Approval", b =>
                {
                    b.Navigation("ApprovalStages");
                });

            modelBuilder.Entity("DOMAIN.Entities.BillOfMaterials.BillOfMaterial", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DOMAIN.Entities.Checklists.Checklist", b =>
                {
                    b.Navigation("MaterialBatches");
                });

            modelBuilder.Entity("DOMAIN.Entities.Departments.Department", b =>
                {
                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.Form", b =>
                {
                    b.Navigation("Assignees");

                    b.Navigation("Responses");

                    b.Navigation("Reviewers");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.FormSection", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("DOMAIN.Entities.Forms.Response", b =>
                {
                    b.Navigation("FormResponses");
                });

            modelBuilder.Entity("DOMAIN.Entities.Grns.Grn", b =>
                {
                    b.Navigation("MaterialBatches");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Batch.MaterialBatch", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("MassMovements");

                    b.Navigation("ReservedQuantities");

                    b.Navigation("SampleWeights");
                });

            modelBuilder.Entity("DOMAIN.Entities.Materials.Material", b =>
                {
                    b.Navigation("Batches");
                });

            modelBuilder.Entity("DOMAIN.Entities.Procurement.Manufacturers.Manufacturer", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("DOMAIN.Entities.Procurement.Suppliers.Supplier", b =>
                {
                    b.Navigation("AssociatedManufacturers");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.MasterProductionSchedule", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.Packing.FinalPacking", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.ProductionSchedule", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DOMAIN.Entities.ProductionSchedules.StockTransfers.StockTransfer", b =>
                {
                    b.Navigation("Sources");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Product", b =>
                {
                    b.Navigation("BillOfMaterials");

                    b.Navigation("FinishedProducts");

                    b.Navigation("Packages");

                    b.Navigation("Routes");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivity", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("DOMAIN.Entities.Products.Production.ProductionActivityStep", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("ResponsibleUsers");

                    b.Navigation("WorkCenters");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.BillingSheet", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Charges");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.PurchaseOrder", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Items");

                    b.Navigation("RevisedPurchaseOrders");
                });

            modelBuilder.Entity("DOMAIN.Entities.PurchaseOrders.PurchaseOrderInvoice", b =>
                {
                    b.Navigation("BatchItems");

                    b.Navigation("Charges");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.Requisition", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.SourceRequisition", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DOMAIN.Entities.Requisitions.SupplierQuotation", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DOMAIN.Entities.Routes.Route", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("ResponsibleRoles");

                    b.Navigation("ResponsibleUsers");

                    b.Navigation("WorkCenters");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentDiscrepancy", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentDocument", b =>
                {
                    b.Navigation("Discrepancies");
                });

            modelBuilder.Entity("DOMAIN.Entities.Shipments.ShipmentInvoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.DistributedRequisitionMaterial", b =>
                {
                    b.Navigation("CheckLists");

                    b.Navigation("MaterialItemDistributions");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.Warehouse", b =>
                {
                    b.Navigation("ArrivalLocation");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.WarehouseArrivalLocation", b =>
                {
                    b.Navigation("DistributedFinishedProducts");

                    b.Navigation("DistributedRequisitionMaterials");

                    b.Navigation("DistributedStockTransferBatches");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.WarehouseLocation", b =>
                {
                    b.Navigation("Racks");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.WarehouseLocationRack", b =>
                {
                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("DOMAIN.Entities.Warehouses.WarehouseLocationShelf", b =>
                {
                    b.Navigation("MaterialBatches");
                });

            modelBuilder.Entity("DOMAIN.Entities.WorkOrders.WorkOrder", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
